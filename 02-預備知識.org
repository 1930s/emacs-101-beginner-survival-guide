* 預備知識
這一篇會講解 Emacs 的必備預備知識， *請務必詳讀，後面不會再解釋。*

以前你可能聽過 Emacs，但可能因為各種原因而沒用過或學不下去，例如網路上的教學又凌亂不連貫、有問題不知從何問起？下面整理了幾乎所有初學者都會遇到的最常見問題。

然而首先我想從這個問題開始：「到底 Emacs 是什麼東西？」在這之前，先打開你系統上的 Emacs：

#+BEGIN_QUOTE
- Q: 該怎麼使用終端機版的 Emacs？
- A: 加上 =-nw= 參數：

: $ emacs -nw
#+END_QUOTE

你會見到一個歡迎畫面，按 =q= 關掉它，會看到 =*scratch*= 這個空空如也的畫面配著三行字。這個 =*scratch*= 可以看作是個無特別意義的塗鴉紙，可以在上面亂打一些字。好啦，就這樣開始吧：


** C-x, M-f 這些東西代表什麼意思？

    - Emacs 使用 *簡寫* 表示鍵盤組合鍵。如：
      - =C-a= 表示按住 =Ctrl= 再按 =a= 。
      - =M-f= 表示按住 =Alt/Meta= 再按 =f= ，或者按一下 =Esc= 再按 =f= 。
      - =C-x C-f= 表示按住 =Ctrl= 後，再按 =xf= 。
      - =C-x k= 表示按了 =C-x= 後，放開 ，再按一下 =k=
    - =C-x=, =C-c=, =C-u= 這三者是前綴(prefix)組合鍵，有特殊意義，你不能單獨使用（例如你無法把某個功能綁到只按一個 =C-x= 就能達成，它會報錯）。
            例如開檔 =C-x C-f= 、存檔 =C-x C-s= 、離開 Emacs =C-x C-c=
    - =M-x= 是直接呼叫「指令名稱」。或者精確的說，「函數」(function)
    - =C-u= 是給命令加上參數時在使用的，初學不需要知道這個，以後再說 XD

#+BEGIN_QUOTE
前面提到的，Emacs 是個 Lisp 環境，而你按的每一個按鍵，對 Emacs 來說實際上其實就是在 *呼叫函數* 。例如：
- 方向鍵右 -> 執行函數 =(right-char)= ，它的副作用是讓游標向右移動一個字元。
- 方向鍵上 -> 執行函數 =(previous-line)= ，它的副作用是讓游標向上移動一行。

因此，只要是 =M-x= 呼叫得出的函數，你都可以重新綁定成你自己喜歡的按鍵。（方法後述）
#+END_QUOTE

** Emacs 是什麼？

[[file:pic/alliances_zh.png]]

這個問題聽起來很蠢，但其實我認為非常重要，因為當你領悟了這點，你在學習 Emacs 時腦中會少掉很多問號與 WTF，並越用越豁然開朗。

我的理解是這樣的： *Emacs 是一個剛好具有文字編輯功能的 Lisp 環境*

什麼意思呢？Emacs 本身是一個完整的 Lisp 環境/直譯器，除了 Lisp 直譯器自己本身與一些低階命令外，其餘部份全是使用 Emacs Lisp 所建構而成。

動手試試看，在上面提到的 =*scratch*= 畫面中輸入 =(message "Hello World!")= ，然後游標移動到括弧後方並按下 =C-x C-e= ，你會發現下方的 minibuffer 訊息列就會顯示出 =Hello World!= 。

發生了什麼事？ =C-x C-e= 的動作代表「執行（eval）該 Lisp 表達式」， =message= 是一個 Emacs 內建的 Lisp function，用途就是在 minibuffer 中顯示字串。或更精確地說，「執行 =message= 這個 Lisp function 的 *副作用* 就是在 minibuffer 中顯示字串。」 =(message "Hello World!")= 是一個完整的 Lisp 表達式，所以你 eval 它，就能在 minibuffer 中顯示 =Hello World!= 這個字串。

Emacs 就是成千上萬個 Lisp function 跟一堆 variable 所構成， 並靠著執行這些 function 的副作用而構成一個文字編輯環境的。

因為 Lisp 表達式如果有副作用，執行的結果就會直接立刻影響整個 Emacs。所以我們常透過 =setq= 這個 function 來 assign variable 達成自訂 Emacs 的目的。

例如執行 =(setq read-file-name-completion-ignore-case t)= 將會把 =read-file-name-completion-ignore-case= 這個 variable 的值設為 =t= ，以後在 =C-x C-f= 就能忽略路徑檔名的大小寫。

#+BEGIN_QUOTE
如果你不懂 Lisp， =(setq VAR_NAME VALUE)= 是 Lisp 中設定 variable 的意思，等同 Python 中的 ~VAR_NAME = VALUE~ 。 =t= 是 Lisp 中的 =True= ， =nil= 則是 =False= 之意。
#+END_QUOTE

當你清楚意識並理解到這點後，往後很多 Emacs 的行為你會豁然開朗，尤其是你在學 Emacs Lisp 時，這是很重要的概念。這也是一個蠻實用的特性，因為你可以極為容易地寫出一些臨時需要的 function 做出一些快速的編輯功能。


** 我剛剛不知動到什麼操作了，要怎麼退出？

   操作遇到問題想取消，狂按幾下 =C-g= 就對了，就像你在 Bash/Zsh 下狂按 =C-c= 一樣。

   如果你是不小心編輯到檔案內容了，按 =C-/= 或 =C-_= 可以復原（Undo）。

#+BEGIN_QUOTE
Emacs 內建的 Undo 跟一般的理解不一樣, 他也可以是 Redo. 參考 [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Undo.html]]
#+END_QUOTE

** Buffer 與 Frame、Window 到底差在哪裡？（務必弄清）

注意，這幾個東西的概念完全不同；

    - Buffer 就是你用 Emacs 時， *開啟檔案後、拿來編輯檔案的地方* 。編輯就編輯，為什麼會叫「Buffer（緩衝區）」這麼奇怪的名子呢？因為你在緩衝區裡面做的任何編輯都還不會被立刻實際寫入檔案，直到按 =C-x C-s= 存檔為止，這就是「緩衝區」的概念。
      - 順帶一題， *Minibuffer* 指的是 Emacs 視窗最下方、用來顯示訊息或者互動式操作中輸入資料的那一條。
    - Frame 的概念有點像我們一般說的視窗，整個 Emacs 你所看到的範圍就是 Frame： *Frame 的功能就是將 Buffer 的內容顯示在螢幕上* 。
    - Window 就是被切割的 Frame，也就是。你可以把 Frame 切成好幾塊，例如上下各一個、或左右各一個， *每一塊就是一個 Window* ，這樣你就可以同時看好幾個 buffer 的內容，有點像 tiling window manager 那樣。

#+BEGIN_QUOTE
拿 MVC 架構來比喻的話：
- buffer 有點像 model 的角色，暫存了你正在編輯的檔案內容；
- frame/window 有點像 view 的角色，從 buffer 中讀出文字，並顯示出來。
#+END_QUOTE

圖解就是這樣：
[[file:pic/DrewsEmacsWindowCallouts.jpg]]

#+BEGIN_QUOTE
其實會有 Buffer 這麼奇怪的詞完全是歷史因素，因為 Vi 與 Emacs 發明時的 70 年代，大家都還在用 =ed= 之類的行編輯器在編輯檔案，還沒有這種「輸入什麼東西、即時就可以在螢幕上見到修正」的編輯器，所以才會把編輯區叫做 Buffer。在那時這種功能可是創新的呢。

-- kuanyui
#+END_QUOTE

*** 操作方式

    - 關掉目前的 Frame 是 =C-x 0= ， *但這個動作並不會把 Buffer 也一起關掉！* 即使關掉 frame，buffer 其實還活在背景中、隨時可以叫出。這一點與現在一般常見的編輯器不同，並不是關掉視窗後、檔案也會一起關閉。
      - 切換到不同的 Frame： =C-x o=
      - 將目前以外的所有 Frame 關掉： =C-x 1=
      - 將目前的 Frame 分成上下兩塊： =C-x 2=
      - 將目前的 Frame 分成左右兩塊： =C-x 3=

    - 關掉 Buffer 是 =C-x k= ， *將會真正地把檔案關掉* (kill-buffer)
      - 切換到下一個/前一個 buffer： =C-x C-<right>/<left>= （方向鍵）
      - 直接切到某個 buffer： =C-x b= （可以用 =tab= 鍵補全）
      - 開啟 buffer 管理員： =C-x C-b= （強力推薦改用 =Ibuffer= ，因為預設的非常難用）

#+BEGIN_QUOTE
為什麼要搞得那麼複雜？其實這種特性非常好用也非常常用，由於 Frame 與 Buffer 的概念是分開的，所以可以 *開多個 Frame，且每個 Frame 都顯示同個 Buffer* ，代表你可以同時開多個 Frame，同時看「一個檔案的不同部份」，不管是寫文章或寫程式時都非常方便。
#+END_QUOTE

** 什麼是 Kill-ring？

其實 Kill-ring 就是現在大家常說的剪貼簿（clipboard）啦，跟 Frame = Window 一樣，只是換個名詞而已。

在 Emacs 中，刪除文字的指令（例如 =C-k=, =M-d= ）其實通常不會把文字真的刪除掉，而是預設會丟入 Kill-ring。

- 按 =C-y= 可以把最近一次被 Kill 掉的文字從 Kill-ring 給「拉 (Yank) 」出來。
- 再按 N 下 =M-y= 可以把前 N 次被 Kill 掉的文字從 Kill-ring 中「拉」出來。
