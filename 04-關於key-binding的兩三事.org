* 不成文的 key-binding 慣例
一開始你應該會覺得 Emacs 的 key-binding 很難記，怎麼各種 mode 都有不同按鍵。然而其實有很多常見功能是有慣例可尋的。以下舉出幾個範例：

| 按鍵      | 功能                         | 範例                                            |
|-----------+------------------------------+-------------------------------------------------|
| =q=       | 關閉 buffer                  | Dired, Package, IBuffer, Magit                  |
| =g=       | 畫面重新整理/更新            | Dired, Package, IBuffer, Magit                  |
| =^=       | 回到上一層目錄               | Dired, Info,                                    |
|-----------+------------------------------+-------------------------------------------------|
| =D=       | 刪除                         | Dired, Package, IBuffer                         |
| =d=       | 標記為刪除（但尚未真的刪除） | Dired, Package, IBuffer                         |
| =x=       | 將標記為刪除的項目刪掉       | Dired, Package, IBuffer                         |
| =m=       | 標記項目                     | Dired, IBuffer                                  |
| =u=       | 取消標記項目                 | Dired, IBuffer                                  |
|-----------+------------------------------+-------------------------------------------------|
| =C-c C-c= | 編譯/執行                    | python-mode, lisp-mode, haskell-mode            |
|           | 套用編輯/送出                | Magit, Message, twittering-mode                 |
| =C-c C-z= | 開一個 interpreter           | python-mode, ruby-mode, lisp-mode, haskell-mode |

* Prefix Argument (=C-u=, Universal Argument)

=C-u= prefix 在 Emacs 裡稱作 *universal-argument* ，又常稱為 *prefix argument* ，很多指令在呼叫前，先按一下 =C-u= ，會提供相關、但不完全相同的功能。

Emacs 101 一開始，不是有提過「了解 Emacs 其實是個 Lisp 環境，對於理解 Emacs 的行為是很重要的」嗎？這裡你就可以明白為什麼了。實際上，Emacs 中有內建一個全域變數叫做 =current-prefix-arg= 。當我們按一下 =C-u= 時， =current-prefix-arg= 會變成 =(4)= ，按兩下會變成 =(16)= ，再按一次會變 =(64)= ...以此類推，所以很多 function 會利用這一點，在 function 中檢查目前 =current-prefix-arg== 的值，來達成「除了本身的功能外額外的功能」。

我們已經知道 =C-x C-e= 可以 eval Lisp 運算式，並在 minibuffer 中顯示結果。然而如果前面加一個 =C-u= prefix 的話，就能把結果插入目前游標位置，而不只是顯示在 minibuffer 中。

另一個例子則是 =M-;= 我們知道它可以在目前行自動插入該語言的註解。按 =C-u M-;= 的話 ，則可以把該行註解刪掉、並加入 kill-ring。

再一個例子。在 Org-mode 中，按按 =C-c C-l= 可以插入各種不同的連結連結，但如果多加一個 =C-u= prefix 可以直接插入「檔案」連結。會這樣設計的原因很簡單，因為在 Org-mode 中我們最常需要插入的連結通常就是檔案連結。


#+BEGIN_QUOTE
在 Vim 中，我們常會先按數字鍵 N 再按指令，代表執行該指令 N 次。

Emacs裡面也可以這樣，其實就是透過 =C-u= prefix。當命令並沒有設計 prefix argument 的對應方式時， =C-u= prefix 預設的意義則會變成「重複該命令 4 次」； =C-u N= 再呼叫指令，則是重複該指令 N 次

不過我覺得這樣很難按，其實我都是按 =Esc N= 再按指令，跟 =C-u N= 的效果完全相同。

-- kuanyui
#+END_QUOTE

* TTY / Terminal / Console 中的 Key-binding 有問題？

#+BEGIN_QUOTE
因為我自己都是在Tmux中使用Emacs，為此，我寫過一篇文章在詳細講這部份。有興趣的人請參考： [[https://kuanyui.github.io/2013/11/26/emacs-with-tmux/][Emacs & Tmux 折騰筆記 | 東北角的小徑]]

-- kuanyui
#+END_QUOTE

換到文字界面的 Emacs 後，會發現有部份原本可以使用的 key-binding 突然變得不能用了，尤其是最複雜的 Org-mode（例如 =Shift+[Arrow]= 、 =Ctrl+[0-9]= ），因為這些按鍵終端機是抓不到的。

** 一大堆 =C-M-= 開頭的 Emacs 抓不到啦！
Terminal中，Emacs可以抓到 =C-x= ，也可以抓到 =M-x= ，但就是抓不到 =C-M-x= （這不是Emacs的錯。確認方法是先按 =C-h k= 再按 =C-M-x= 你會發現Emacs毫無反應，因為這個按鍵訊號完全沒有成功傳給Emacs），怎麼辦呢？

其實 =ESC= 鍵等同於 =M-= ，所以當你要按 =C-M-s= 時，你可以先按一下 =ESC= 再按 =C-s= ，就等同於 =C-M-s= 了！

#+BEGIN_QUOTE
那Ctrl + 數字怎麼辦？我也不知道。

-- kuanyui
#+END_QUOTE

** Org-mode
Org-mode 在設計時有考慮到這問題，所以有設計了許多在終端機裡也能用的替代按鍵，可以參考 [[http://orgmode.org/manual/TTY-keys.html][TTY Keys]]。

** Super Key
=Super= 鍵（就是常說的 =Win= 鍵）是在 X11 裡定義的，除非經過一些特殊設定，不然 tty 或 terminal 都無法辨識這個鍵，我自己是沒去折騰這個，因為太麻煩。如果你堅持要用，詳情可以查一下 StackOverflow，有人問過。

** 其他
遇到其他之前在 GUI 版可以使用、但終端機抓不到的 key-binding 時，基本上你有幾種選擇：

1. =C-h f= 直接查那個 function 是否本來就還有其他按法。
2. 開 GUI 版， =C-h k= 查詢你平常按的那個 key-binding 是綁到哪個 function，再自己自訂一個 CLI 版下能用的 key-binding。
3. 土法煉鋼 =M-x=
4. 大絕招：不要用 =emacs -nw= ，直接用 GUI 版。
