自訂快速鍵前，尤其自訂遇到問題時，務必先詳讀此篇概念。
* 不成文的 key-binding 慣例
一開始你應該會覺得 Emacs 的 key-binding 很難記，怎麼各種 mode 都有不同按鍵。然而其實有很多常見功能是有慣例可尋的。以下舉出幾個範例：

| 按鍵      | 功能                         | 範例                                            |
|-----------+------------------------------+-------------------------------------------------|
| =q=       | 關閉 buffer                  | Dired, Package, IBuffer, Magit                  |
| =g=       | 畫面重新整理/更新            | Dired, Package, IBuffer, Magit                  |
| =^=       | 回到上一層目錄               | Dired, Info,                                    |
|-----------+------------------------------+-------------------------------------------------|
| =D=       | 刪除                         | Dired, Package, IBuffer                         |
| =d=       | 標記為刪除（但尚未真的刪除） | Dired, Package, IBuffer                         |
| =x=       | 將標記為刪除的項目刪掉       | Dired, Package, IBuffer                         |
| =m=       | 標記項目                     | Dired, IBuffer                                  |
| =u=       | 取消標記項目                 | Dired, IBuffer                                  |
|-----------+------------------------------+-------------------------------------------------|
| =C-c C-c= | 編譯/執行                    | python-mode, lisp-mode, haskell-mode            |
|           | 套用編輯/送出                | Magit, Message, twittering-mode                 |
| =C-c C-z= | 開一個 interpreter           | python-mode, ruby-mode, lisp-mode, haskell-mode |

* 設定按鍵的規則
設定按鍵時有一些注意事項：

** 小心後者設定會蓋掉前者。
假如你在設定檔裡面放入：
#+BEGIN_SRC elisp
(global-set-key (kbd "C-r") 'undo-tree-redo)
(global-set-key (kbd "C-r") 'recentf-open-files)
#+END_SRC
你會發現最後 =C-r= 執行的是第二行的 =recentf-open-files= 。所以當你納悶為何定義快速鍵沒用時，檢查一下是否重複設定了。

** Prefix Key (=C-x= & =C-c=)
=C-x= 與 =C-c= 是前綴(prefix)組合鍵，有特殊意義：
1. *你無法單獨使用 Prefix key（例如你無法把某個功能綁到只按一個 =C-x= 就能達成，當你試圖這樣綁定時它會報錯）。*
2. 反過來說， *你也無法用這兩個以外的按鍵當作 Prefix key* ，例如把某個功能綁定到 =C-s C-k= 或 =C-d m= 。

3. 靠著 Prefix key，你可以綁任意「深度」的 combo「組合技」，例如只要你爽（或者夠無聊），你也可以把查[[https://github.com/kuanyui/moedict.el][萌典]] 的命令綁到 =C-x 上 上 下 下 左 右 左 右 a b=:

#+BEGIN_SRC elisp
(global-set-key (kbd "C-x <up> <up> <down> <down> <left> <right> <left> <right> a b") 'moedict)
#+END_SRC

#+BEGIN_QUOTE
我自己在設定快速鍵時常利用單字的第一個字母作為設定的規則，可以讓這種組合技變得很好記憶。例如我這樣設定我的 Magit (Git 的 Emacs 版前端)：

#+BEGIN_SRC elisp
(global-set-key (kbd "C-x g s") 'magit-status)
(global-set-key (kbd "C-x g l") 'magit-log)
#+END_SRC

這樣我就可以按 =C-x g s= 來看 =git status= ，按 =C-x g l= 來看 =git log= 。

-- kuanyui
#+END_QUOTE
** 小心 Amibigious 
來看範例，假如你在設定檔裡放入這兩行：
#+BEGIN_SRC elisp
(global-set-key (kbd "C-c m") 'moedict)
(global-set-key (kbd "C-c m r") 'moedict/region)
#+END_SRC
第一行執行起來沒問題，但執行到第二行就炸掉了。因為 Emacs 會不知道你按 =C-c m= 時到底是想衝三小，到底是打算執行 =moedict= 呢，還是準備執行 =moedict/region= 按到一半呢？他是要出來嗎，還是要進去呢？真的很痛苦。所以 Emacs 乾脆不允許這種設定，直接報錯。

讓我們斷開鎖鏈，斷開魂結，斷開 key-binding 的一切牽連：
#+BEGIN_SRC elisp
(global-set-key (kbd "C-c m m") 'moedict)
(global-set-key (kbd "C-c m r") 'moedict/region)
#+END_SRC
這樣寫就沒問題啦。

** Prefix Argument (=C-u=, Universal Argument)

=C-u= prefix 在 Emacs 裡稱作 *universal-argument* ，又常稱為 *prefix argument* ，很多指令在呼叫前，先按一下 =C-u= ，會提供 *與預設行為相關、但不完全相同的功能。*

Emacs 101 一開始，不是有提過「了解 Emacs 其實是個 Lisp 環境，對於理解 Emacs 的行為是很重要的」嗎？這裡你就可以明白為什麼了。實際上，Emacs 中有內建一個全域變數叫做 =current-prefix-arg= 。當我們按一下 =C-u= 時， =current-prefix-arg= 會變成 =(4)= ，按兩下會變成 =(16)= ，再按一次會變 =(64)= ...以此類推，所以很多 function 會利用這一點，在 function 中檢查目前 =current-prefix-arg== 的值，來達成「除了本身的功能外額外的功能」。

我們已經知道 =C-x C-e= 可以 eval Lisp 運算式，並在 minibuffer 中顯示結果。然而如果前面加一個 =C-u= prefix 的話，就能把結果插入目前游標位置，而不只是顯示在 minibuffer 中。

另一個例子則是 =M-;= 我們知道它可以在目前行自動插入該語言的註解。按 =C-u M-;= 的話 ，則可以把該行註解刪掉、並加入 kill-ring。

再一個例子。在 Org-mode 中，按按 =C-c C-l= 可以插入各種不同的連結連結，但如果多加一個 =C-u= prefix 可以直接插入「檔案」連結。會這樣設計的原因很簡單，因為在 Org-mode 中我們最常需要插入的連結通常就是檔案連結。


#+BEGIN_QUOTE
在 Vim 中，我們常會先按數字鍵 N 再按指令，代表執行該指令 N 次。

Emacs 裡面也可以這樣，其實就是透過 =C-u= prefix。當命令並沒有設計 prefix argument 的對應方式時， =C-u= prefix 預設的意義則會變成「重複該命令 4 次」； =C-u N= 再呼叫指令，則是重複該指令 N 次

不過我覺得這樣很難按，其實我都是按 =Esc N= 再按指令，跟 =C-u N= 的效果完全相同。

-- kuanyui
#+END_QUOTE

* TTY / Terminal / Console 中的 Key-binding 有問題？

#+BEGIN_QUOTE
因為我自己都是在 Tmux 中使用 Emacs，為此，我寫過一篇文章在詳細講這部份。有興趣的人請參考： [[https://kuanyui.github.io/2013/11/26/emacs-with-tmux/][Emacs & Tmux 折騰筆記 | 東北角的小徑]]

-- kuanyui
#+END_QUOTE

換到文字界面的 Emacs 後，會發現有部份原本可以使用的 key-binding 突然變得不能用了，尤其是最複雜的 Org-mode（例如 =Shift+[Arrow]= 、 =Ctrl+[0-9]= ），因為這些按鍵終端機是抓不到的。

** 一大堆 =C-M-= 開頭的 Emacs 抓不到啦！
Terminal 中，Emacs 可以抓到 =C-x= ，也可以抓到 =M-x= ，但就是抓不到 =C-M-x= （這不是 Emacs 的錯。確認方法是先按 =C-h k= 再按 =C-M-x= 你會發現 Emacs 毫無反應，因為這個按鍵訊號完全沒有成功傳給 Emacs），怎麼辦呢？

其實 =ESC= 鍵等同於 =M-= ，所以當你要按 =C-M-s= 時，你可以先按一下 =ESC= 再按 =C-s= ，就等同於 =C-M-s= 了！

#+BEGIN_QUOTE
那 Ctrl + 數字怎麼辦？我也不知道。

-- kuanyui
#+END_QUOTE

** Org-mode
Org-mode 在設計時有考慮到這問題，所以有設計了許多在終端機裡也能用的替代按鍵，可以參考 [[http://orgmode.org/manual/TTY-keys.html][TTY Keys]]。

** Super Key
=Super= 鍵（就是常說的 =Win= 鍵）是在 X11 裡定義的，除非經過一些特殊設定，不然 tty 或 terminal 都無法辨識這個鍵，我自己是沒去折騰這個，因為太麻煩。如果你堅持要用，詳情可以查一下 StackOverflow，有人問過。

** 其他
遇到其他之前在 GUI 版可以使用、但終端機抓不到的 key-binding 時，基本上你有幾種選擇：

1. =C-h f= 直接查那個 function 是否本來就還有其他按法。
2. 開 GUI 版， =C-h k= 查詢你平常按的那個 key-binding 是綁到哪個 function，再自己自訂一個 CLI 版下能用的 key-binding。
3. 土法煉鋼 =M-x=
4. 大絕招：不要用 =emacs -nw= ，直接用 GUI 版。

* 應該直接習慣 =C-p= / =C-n= / =C-f= / =C-b= 的游標移動方法嗎?
#+BEGIN_QUOTE
我個人覺得這根本難按死了！我自己是直接按方向鍵的。
原 Vimmer 可能就會覺得手指移動到鍵盤右下角很麻煩吧。試試 =Evil= （在 Emacs 中使用 Vi 操作方式）也許你會喜歡。

-- kuanyui
#+END_QUOTE

